buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.11.0"
    id 'net.researchgate.release' version '2.1.2'
    id 'com.github.kt3k.coveralls' version '2.4.0'
}

apply plugin: 'java'
apply plugin: "jacoco"
apply plugin: 'idea'

apply from: 'libraries.gradle'
apply from: 'gradle/license.gradle'
apply from: 'gradle/release.gradle'

apply plugin: 'findbugs'
apply plugin: 'pmd'

apply plugin: 'com.github.kt3k.coveralls'

sourceCompatibility = 1.7

def mavenRepoUploadUrl = "scp://maxdevcloud/var/www/maven/repo"
def mavenRepoUploadUser = "git"
def privateKeyFile='c:/home/ssaliman/.ssh/id_rsa'
group = "net.saliman"
archivesBaseName="spring-boot-starter-request-correlation"
version = '1.1.1'

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

jar {
    manifest {
        attributes 'Implementation-Title': 'spring-boot-starter-request-correlation',
                   'Implementation-Version': version
    }
}

repositories {
    jcenter()
}

configurations {
  archives
}

compileJava {
    options.fork = true
}

dependencies {

    compile (libraries.springBootWeb)
    compile (libraries.springCloudFeign)
    // For whatever reason, the Feign starter still brings in an old version
    // of the http client.  We'll want to remove this from time to time to 
		// see if Feign starts bringing in the right version on its own.
    compile (libraries.apacheHttpClient)
    compile (libraries.commonsLang)

    testCompile (libraries.springBootTest)
    testCompile (libraries.junit)
    testCompile (libraries.mockito)

		// Dependencies needed to upload to a maven reposotory.
	  archives "org.apache.maven.wagon:wagon-ssh:2.2"
		archives "org.apache.maven.wagon:wagon-ssh-external:2.2"
}

findbugs {
    ignoreFailures = true
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// Upload to the remote Maven repository. We change up the pom dependencies 
// to make sure it is right on the server.
uploadArchives {
  doFirst {
    repositories {
      mavenDeployer {
        configuration = project.configurations.archives
        repository(url: mavenRepoUploadUrl) {
          authentication(userName: mavenRepoUploadUser,
                         privateKey: file("${privateKeyFile}"),
                   passphrase: "${privateKeyPassphrase}")
        }
			}
		}
	}
}

