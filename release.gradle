apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}
if ( isReleaseVersion ) {
    println 'using staging'
    ext.mavenCentralUploadUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
} else {
    println 'using snapshot'
    ext.mavenCentralUploadUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

// Only *Require* signing if we are uploading a non snapshot version.  If we
// do need to sign, make sure we've got the properties we need to do the
// signing.
import org.gradle.plugins.signing.Sign
gradle.taskGraph.whenReady { taskGraph ->
    tasks.withType(org.gradle.plugins.signing.Sign).all {
        required = taskGraph.hasTask(':uploadArchives') && isReleaseVersion
        if ( required ) {
            // Use Java's console to read from the console (no good for a CI
            // environment)
            Console console = System.console()
            console.printf '\n\nWe have to sign some things in this build...\n\n'

            if ( !project.hasProperty('signing.keyId') ) {
                def id = console.readLine('PGP Public Key Id: ')
                allprojects { ext.'signing.keyId' = id }
            }

            if ( !project.hasProperty('signing.secretKeyRingFile') ) {
                def file = console.readLine('PGP Secret Key Ring File (absolute path): ')
                allprojects { ext.'signing.secretKeyRingFile' = file }
            }

            if ( !project.hasProperty('signing.password') ) {
                def password = console.readPassword('PGP Private Key Password: ')
                allprojects { ext.'signing.password' = password }
            }

            console.printf '\nThanks.\n\n'
        }
    }
}

uploadArchives {
    // We can't use taskGraph.whenReady because it doesn't resolve until after
    // configuration.  The startParameter is not as good, but it probably
    // good enough for our purposes.
    if ( gradle.startParameter.taskNames.contains('uploadArchives') ) {
        // Use Java's console to read from the console (no good for a CI
        // environment)
        Console console = System.console()
        console.printf '\n\nWe have to upload some things in this build...\n\n'

        if ( !project.hasProperty('mavenCentralUsername') ) {
            def mavenCentralUsername = console.readLine('Maven Central Username: ')
            allprojects { ext.'mavenCentralUsername' = mavenCentralUsername }
        }

        if ( !project.hasProperty('mavenCentralPassword') ) {
            def mavenCentralPassword = console.readLine('Maven Central Password: ')
            allprojects { ext.'mavenCentralPassword' = mavenCentralPassword }
        }
        repositories {
            mavenDeployer {
                if ( signing.signatory ) {
                    beforeDeployment { signing.signPom(it) }
                }
                configuration = configurations.archives

                repository(url: mavenCentralUploadUrl) {
                    authentication(userName: mavenCentralUsername,
                            password: mavenCentralPassword)
                    releases(updatePolicy: 'always')
                    snapshots(updatePolicy: 'always')
                }
                pom.project(pomConfiguration)

            }
        }
    }
}

def getPomConfiguration() {
    return {
        name 'spring-boot-starter-request-correlation'
        packaging 'jar'
        description 'Spring Cloud Request Correlation'
        url 'https://github.com/stevesaliman/spring-boot-starter-request-correlation'

        scm {
            connection 'scm:git:https://github.com/stevesaliman/spring-boot-starter-request-correlation.git'
            developerConnection 'scm:git:https://github.com/stevesaliman/spring-boot-starter-request-correlation.git'
            url 'https://github.com/ssaliman/spring-boot-starter-request-correlation.git'
        }

        licenses {
            license {
                name 'The Apache License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }

        developers {
            developer {
                id 'stevesaliman'
                name 'Steven C. Saliman'
                email 'support@saliman.net'
            }
            developer {
                id 'jmnarloch'
                name 'Jakub Narloch'
                email 'jmnarloch@gmail.com'
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUsername') ? project.getProperty('bintrayUsername') : ''
    key = project.hasProperty('bintrayApiKey') ? project.getProperty('bintrayApiKey') : ''

    configurations = [ 'archives' ]

    pkg {
        // repo = 'gradle-plugins'
        repo = 'maven'
        name = 'spring-boot-starter-request-correlation'
        desc = 'A Spring Boot starter that can set correlation ids on outgoing requests.'
        licenses = [ 'Apache-2.0' ]
        websiteUrl = 'https://github.com/stevesaliman/spring-boot-starter-request-correlation'
        issueTrackerUrl = 'https://github.com/stevesaliman/spring-boot-starter-request-correlation/issues'
        vcsUrl = 'https://github.com/stevesaliman/spring-boot-starter-request-correlation.git'
        labels = [ 'spring', 'spring-boot' ]
        publicDownloadNumbers = true
        version {
            vcsTag = "Release_${version}"
        }
    }
}
