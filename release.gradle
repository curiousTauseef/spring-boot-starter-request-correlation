apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}
if ( isReleaseVersion ) {
    println 'using staging'
    ext.mavenCentralUploadUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
} else {
    println 'using snapshot'
    ext.mavenCentralUploadUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        requestCorrelationStarter(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
            pom {
                name = 'spring-boot-starter-request-correlation'
                description = 'A Spring Boot starter that can set correlation ids on outgoing requests.'
                url = 'https://github.com/stevesaliman/spring-boot-starter-request-correlation'
                packaging = 'jar'
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'stevesaliman'
                        name = 'Steven C. Saliman'
                        email = 'support@saliman.net'
                    }
                    developer {
                        id = 'jmnarloch'
                        name = 'Jakub Narloch'
                        email = 'jmnarloch@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:https://stevesaliman@github.com/stevesaliman/spring-boot-starter-request-correlation'
                    developerConnection = 'scm:git@github.com:stevesaliman/spring-boot-starter-request-correlation.git'
                    url = 'https://github.com/stevesaliman/spring-boot-starter-request-correlation'
                }
            }

        }
    }

    repositories {
        maven {
            url = mavenCentralUploadUrl
            // We only need to mess with credentials if we're publishing...
            if ( gradle.startParameter.taskNames.contains("publish") ) {
                println "\n\nWe have to upload some things in this build...\n"

                if ( !project.hasProperty('mavenCentralUsername') ) {
                    throw new MissingPropertyException("No mavenCentralUsername was provided")
                }

                if ( !project.hasProperty('mavenCentralPassword') ) {
                    throw new MissingPropertyException("No mavenCentralPassword was provided")
                }
                credentials {
                    username mavenCentralUsername
                    password mavenCentralPassword
                }
            }
        }
    }
}

signing {
    sign publishing.publications.requestCorrelationStarter
}

// Configure BinTray publishing
bintray {
    user = project.hasProperty('bintrayUsername') ? project.getProperty('bintrayUsername') : ''
    key = project.hasProperty('bintrayApiKey') ? project.getProperty('bintrayApiKey') : ''

    publications = [ 'requestCorrelationStarter' ]
    publish = true

    pkg {
        // repo = 'gradle-plugins'
        repo = 'maven'
        name = 'spring-boot-starter-request-correlation'
        desc = 'A Spring Boot starter that can set correlation ids on outgoing requests.'
        licenses = [ 'Apache-2.0' ]
        websiteUrl = 'https://github.com/stevesaliman/spring-boot-starter-request-correlation'
        issueTrackerUrl = 'https://github.com/stevesaliman/spring-boot-starter-request-correlation/issues'
        vcsUrl = 'https://github.com/stevesaliman/spring-boot-starter-request-correlation.git'
        labels = [ 'spring', 'spring-boot', 'coverage' ]
        publicDownloadNumbers = true
        version {
            // name = version
            // vcsTag = version
            vcsTag = "Release_${version}"
        }
    }
}


// When we're ready to go, there are a couple of things we'll need to do before
// we execute anything.
gradle.taskGraph.whenReady { taskGraph ->
    // Only *require* signing if we are uploading a non snapshot version.  If we
    // do need to sign, make sure we've got the properties we need to do the
    // signing.
    tasks.withType(org.gradle.plugins.signing.Sign).all {
        def required = (taskGraph.hasTask(":publish") && isReleaseVersion)
        if ( required ) {
            println "\n\nWe have to sign some things in this build...\n"

            if ( !project.hasProperty('signing.keyId') ) {
                throw new MissingPropertyException("No signing.keyId was provided")
            }

            if ( !project.hasProperty('signing.secretKeyRingFile') ) {
                throw new MissingPropertyException("No signing.secretKeyRingFile was provided")
            }

            if ( !project.hasProperty('signing.password') ) {
                throw new MissingPropertyException("No signing.password was provided")
            }
        }
    }
}
